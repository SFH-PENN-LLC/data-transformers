import { DataTransformer } from '../types.js';

export class YandexDataTransformer implements DataTransformer {
	transform(records: Record<string, any>[]): Record<string, any>[] {
		console.log('üîÑ Applying Yandex Direct transformations...');

		return records.map(record => {
			const transformed = { ...record };

			// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –¥–∞—Ç
			if (record.Date) {
				transformed.date = record.Date;
				transformed.date_start = record.Date;
				transformed.date_stop = record.Date;
			}

			// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ID –∫–∞–º–ø–∞–Ω–∏–∏
			if (record.CampaignId) {
				transformed.campaign_id = record.CampaignId;
			}

			if (record.CampaignName) {
				transformed.campaign_name = record.CampaignName;
			}

			// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ID –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
			if (record.AdGroupId) {
				transformed.adset_id = record.AdGroupId; // –ú–∞–ø–∏–º –Ω–∞ adset –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
				transformed.adgroup_id = record.AdGroupId;
			}

			if (record.AdGroupName) {
				transformed.adset_name = record.AdGroupName;
				transformed.adgroup_name = record.AdGroupName;
			}

			// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
			if (record.AdId) {
				transformed.ad_id = record.AdId;
			}

			// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ —á–∏—Å–ª–∞
			const numericFields = [
				'Impressions', 'Clicks', 'Cost', 'Conversions',
				'CampaignId', 'AdGroupId', 'AdId', 'CriterionId'
			];

			numericFields.forEach(field => {
				if (record[field] !== undefined && record[field] !== '') {
					transformed[field] = Number(record[field]) || 0;
				}
			});

			// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
			const percentageFields = ['Ctr', 'ConversionRate', 'ImpressionShare'];
			percentageFields.forEach(field => {
				if (record[field] !== undefined && record[field] !== '') {
					// –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (0.05), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
					// –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–º (5%), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π
					let value = Number(record[field]);
					if (!isNaN(value) && value > 1) {
						value = value / 100; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å
					}
					transformed[field] = value;
				}
			});

			// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–Ω—ã—Ö –ø–æ–ª–µ–π (–∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ä—É–±–ª–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
			const costFields = ['Cost', 'AvgCpc', 'AvgCpm', 'CostPerConversion', 'Revenue'];
			costFields.forEach(field => {
				if (record[field] !== undefined && record[field] !== '') {
					// Yandex Direct –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö —Å –∫–æ–ø–µ–π–∫–∞–º–∏
					transformed[field] = Number(record[field]) || 0;
				}
			});

			// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
			if (record.Device) {
				// –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
				const deviceMap: Record<string, string> = {
					'DESKTOP': 'desktop',
					'MOBILE': 'mobile',
					'TABLET': 'tablet',
					'TV': 'tv'
				};
				transformed.device = deviceMap[record.Device] || record.Device.toLowerCase();
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
			transformed.data_source = 'yandex_direct';

			// –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
			if (transformed.Cost && transformed.Clicks && transformed.Clicks > 0) {
				transformed.avg_cpc = transformed.Cost / transformed.Clicks;
			}

			if (transformed.Cost && transformed.Impressions && transformed.Impressions > 0) {
				transformed.avg_cpm = (transformed.Cost / transformed.Impressions) * 1000;
			}

			if (transformed.Clicks && transformed.Impressions && transformed.Impressions > 0) {
				transformed.ctr = transformed.Clicks / transformed.Impressions;
			}

			if (transformed.Conversions && transformed.Clicks && transformed.Clicks > 0) {
				transformed.conversion_rate = transformed.Conversions / transformed.Clicks;
			}

			if (transformed.Cost && transformed.Conversions && transformed.Conversions > 0) {
				transformed.cost_per_conversion = transformed.Cost / transformed.Conversions;
			}

			return transformed;
		});
	}
}
